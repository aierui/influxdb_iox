syntax = "proto3";
package influxdata.iox.ingester.v1;

// Request from the query service for the data not yet persisted. Serialized as the Ticket value
// for the Arrow Flight doGet request.
message IngesterQueryRequest {
  // Table to search
  string table = 1;

  // Columns the query service is interested in
  repeated string columns = 2;

  // Start time of the query
  int64 min_time = 3;

  // End time of the query
  int64 max_time = 4;

  // Predicate for filtering
  optional Predicate predicate = 5;

  // Optionally only return rows with a sequence number greater than this
  optional uint64 greater_than_sequence_number = 6;
}

// Serialization of `predicate::predicate::Predicate` that contains DataFusion `Expr`s
message Predicate {
  // Optional field restriction. If any are present, restricts the results to only tables which
  // have *at least one* of the fields in field_columns.
  repeated string field_columns = 1;

  // Optional partition key filter
  optional string partition_key = 2;

  // Optional timestamp range: only rows within this range are included in results. Other rows are
  // excluded.
  optional TimestampRange range = 3;

  // Optional arbitrary predicates, represented as list of DataFusion expressions applied a logical
  // conjunction (aka they are 'AND'ed together). Only rows that evaluate to TRUE for all these
  // expressions should be returned. Other rows are excluded from the results.
  repeated LogicalExprNode exprs = 4;

  // Optional arbitrary predicates on the special `_value` column. These expressions are applied to
  // `field_columns` projections in the form of `CASE` statement conditions.
  repeated BinaryExpr value_expr = 5;
}

// Specifies a continuous range of nanosecond timestamps.
message TimestampRange {
  // Start defines the inclusive lower bound.
  int64 start = 1;

  // End defines the exclusive upper bound.
  int64 end = 2;
}

// DataFusion logical expressions
message LogicalExprNode {
  oneof ExprType {
    // column references
    Column column = 1;

    // alias
    AliasNode alias = 2;

    ScalarValue literal = 3;

    // binary expressions
    BinaryExprNode binary_expr = 4;

    // aggregate expressions
    AggregateExprNode aggregate_expr = 5;

    // null checks
    IsNull is_null_expr = 6;
    IsNotNull is_not_null_expr = 7;
    Not not_expr = 8;

    BetweenNode between = 9;
    CaseNode case_ = 10;
    CastNode cast = 11;
    SortExprNode sort = 12;
    NegativeNode negative = 13;
    InListNode in_list = 14;
    bool wildcard = 15;
    ScalarFunctionNode scalar_function = 16;
    TryCastNode try_cast = 17;

    // window expressions
    WindowExprNode window_expr = 18;
  }
}

// A representation of the `BinaryExpr` variant of a DataFusion expression for value expressions.
message BinaryExpr {
  Column left = 1;
  string op = 2;
  LogicalExprNode right = 3;
}

message BinaryExprNode {
  LogicalExprNode l = 1;
  LogicalExprNode r = 2;
  string op = 3;
}

message ColumnRelation {
  string relation = 1;
}

message Column {
  string name = 1;
  ColumnRelation relation = 2;
}

message AliasNode {
  LogicalExprNode expr = 1;
  string alias = 2;
}

message ScalarListValue{
  ScalarType datatype = 1;
  repeated ScalarValue values = 2;
}

message ScalarValue {
  oneof value {
    bool   bool_value = 1;
    string utf8_value = 2;
    string large_utf8_value = 3;
    int32  int8_value = 4;
    int32  int16_value = 5;
    int32  int32_value = 6;
    int64  int64_value = 7;
    uint32 uint8_value = 8;
    uint32 uint16_value = 9;
    uint32 uint32_value = 10;
    uint64 uint64_value = 11;
    float  float32_value = 12;
    double float64_value = 13;
    int32  date_32_value = 14;
    int64  time_microsecond_value = 15;
    int64  time_nanosecond_value = 16;
    ScalarListValue list_value = 17;
    ScalarType null_list_value = 18;
    PrimitiveScalarType null_value = 19;
    Decimal128 decimal128_value = 20;
    int64 date_64_value = 21;
    int64 time_second_value = 22;
    int64 time_millisecond_value = 23;
    int32 interval_yearmonth_value = 24;
    int64 interval_daytime_value = 25;
  }
}

enum AggregateFunction {
  MIN = 0;
  MAX = 1;
  SUM = 2;
  AVG = 3;
  COUNT = 4;
  APPROX_DISTINCT = 5;
  ARRAY_AGG = 6;
  VARIANCE = 7;
  VARIANCE_POP = 8;
  COVARIANCE = 9;
  COVARIANCE_POP = 10;
  STDDEV = 11;
  STDDEV_POP = 12;
  CORRELATION = 13;
  APPROX_PERCENTILE_CONT = 14;
  APPROX_MEDIAN = 15;
}

message AggregateExprNode {
  AggregateFunction aggr_function = 1;
  repeated LogicalExprNode expr = 2;
}

message IsNull {
  LogicalExprNode expr = 1;
}

message IsNotNull {
  LogicalExprNode expr = 1;
}

message Not {
  LogicalExprNode expr = 1;
}

message WindowExprNode {
  oneof window_function {
    AggregateFunction aggr_function = 1;
    BuiltInWindowFunction built_in_function = 2;
  }
  LogicalExprNode expr = 3;
  repeated LogicalExprNode partition_by = 4;
  repeated LogicalExprNode order_by = 5;
  optional WindowFrame window_frame = 6;
}

message BetweenNode {
  LogicalExprNode expr = 1;
  bool negated = 2;
  LogicalExprNode low = 3;
  LogicalExprNode high = 4;
}

message CaseNode {
  LogicalExprNode expr = 1;
  repeated WhenThen when_then_expr = 2;
  LogicalExprNode else_expr = 3;
}

message WhenThen {
  LogicalExprNode when_expr = 1;
  LogicalExprNode then_expr = 2;
}

message CastNode {
  LogicalExprNode expr = 1;
  ArrowType arrow_type = 2;
}

message TryCastNode {
  LogicalExprNode expr = 1;
  ArrowType arrow_type = 2;
}

message SortExprNode {
  LogicalExprNode expr = 1;
  bool asc = 2;
  bool nulls_first = 3;
}

message NegativeNode {
  LogicalExprNode expr = 1;
}

message InListNode {
  LogicalExprNode expr = 1;
  repeated LogicalExprNode list = 2;
  bool negated = 3;
}

enum ScalarFunction {
  SQRT = 0;
  SIN = 1;
  COS = 2;
  TAN = 3;
  ASIN = 4;
  ACOS = 5;
  ATAN = 6;
  EXP = 7;
  LOG = 8;
  LOG2 = 9;
  LOG10 = 10;
  FLOOR = 11;
  CEIL = 12;
  ROUND = 13;
  TRUNC = 14;
  ABS = 15;
  SIGNUM = 16;
  OCTETLENGTH = 17;
  CONCAT = 18;
  LOWER = 19;
  UPPER = 20;
  TRIM = 21;
  LTRIM = 22;
  RTRIM = 23;
  TOTIMESTAMP = 24;
  ARRAY = 25;
  NULLIF = 26;
  DATEPART = 27;
  DATETRUNC = 28;
  MD5 = 29;
  SHA224 = 30;
  SHA256 = 31;
  SHA384 = 32;
  SHA512 = 33;
  LN = 34;
  TOTIMESTAMPMILLIS = 35;
  DIGEST = 36;
}

message ScalarFunctionNode {
  ScalarFunction fun = 1;
  repeated LogicalExprNode args = 2;
}

message ScalarType {
  oneof datatype {
    PrimitiveScalarType scalar = 1;
    ScalarListType list = 2;
  }
}

// Contains all valid datafusion scalar types except for List
enum PrimitiveScalarType {
  BOOL = 0;     // arrow::Type::BOOL
  UINT8 = 1;    // arrow::Type::UINT8
  INT8 = 2;     // arrow::Type::INT8
  UINT16 = 3;   // represents arrow::Type fields in src/arrow/type.h
  INT16 = 4;
  UINT32 = 5;
  INT32 = 6;
  UINT64 = 7;
  INT64 = 8;
  FLOAT32 = 9;
  FLOAT64 = 10;
  UTF8 = 11;
  LARGE_UTF8 = 12;
  DATE32 = 13;
  TIME_MICROSECOND = 14;
  TIME_NANOSECOND = 15;
  NULL = 16;

  DECIMAL128 = 17;
  DATE64 = 18;
  TIME_SECOND = 19;
  TIME_MILLISECOND = 20;
  INTERVAL_YEARMONTH = 21;
  INTERVAL_DAYTIME = 22;
}

message ScalarListType {
  repeated string field_names = 1;
  PrimitiveScalarType deepest_type = 2;
}

message Decimal128 {
  bytes value = 1;
  int64 p = 2;
  int64 s = 3;
}

enum BuiltInWindowFunction {
  ROW_NUMBER = 0;
  RANK = 1;
  DENSE_RANK = 2;
  PERCENT_RANK = 3;
  CUME_DIST = 4;
  NTILE = 5;
  LAG = 6;
  LEAD = 7;
  FIRST_VALUE = 8;
  LAST_VALUE = 9;
  NTH_VALUE = 10;
}

message WindowFrame {
  WindowFrameUnits window_frame_units = 1;
  WindowFrameBound start_bound = 2;
  optional WindowFrameBound end_bound = 3;
}

enum WindowFrameUnits {
  ROWS = 0;
  RANGE = 1;
  GROUPS = 2;
}

message WindowFrameBound {
  WindowFrameBoundType window_frame_bound_type = 1;
  optional uint64 bound_value = 2;
}

enum WindowFrameBoundType {
  CURRENT_ROW = 0;
  PRECEDING = 1;
  FOLLOWING = 2;
}

// Broken out into multiple message types so that type metadata did not need to be in separate
// messages. All types that are of the empty message types contain no additional metadata about the
// type.
message ArrowType {
  oneof arrow_type_enum {
    EmptyMessage NONE = 1; // arrow::Type::NA
    EmptyMessage BOOL = 2; // arrow::Type::BOOL
    EmptyMessage UINT8 = 3; // arrow::Type::UINT8
    EmptyMessage INT8 = 4; // arrow::Type::INT8
    EmptyMessage UINT16 = 5; // represents arrow::Type fields in src/arrow/type.h
    EmptyMessage INT16 = 6;
    EmptyMessage UINT32 = 7;
    EmptyMessage INT32 = 8;
    EmptyMessage UINT64 = 9;
    EmptyMessage INT64 = 10;
    EmptyMessage FLOAT16 = 11;
    EmptyMessage FLOAT32 = 12;
    EmptyMessage FLOAT64 = 13;
    EmptyMessage UTF8 = 14;
    EmptyMessage BINARY = 15;
    int32 FIXED_SIZE_BINARY = 16;
    EmptyMessage DATE32 = 17;
    EmptyMessage DATE64 = 18;
    TimeUnit DURATION = 19;
    Timestamp TIMESTAMP = 20;
    TimeUnit TIME32 = 21;
    TimeUnit TIME64 = 22;
    IntervalUnit INTERVAL = 23;
    Decimal DECIMAL = 24;
    List LIST = 25;
    List LARGE_LIST = 26;
    FixedSizeList FIXED_SIZE_LIST = 27;
    Struct STRUCT = 28;
    Union UNION = 29;
    Dictionary DICTIONARY = 30;
    EmptyMessage LARGE_BINARY = 31;
    EmptyMessage LARGE_UTF8 = 32;
  }
}

enum TimeUnit {
  Second = 0;
  TimeMillisecond = 1;
  Microsecond = 2;
  Nanosecond = 3;
}

enum IntervalUnit {
  YearMonth = 0;
  DayTime = 1;
  MonthDayNano = 2;
}

message Decimal {
  uint64 whole = 1;
  uint64 fractional = 2;
}

message Timestamp {
  TimeUnit time_unit = 1;
  string timezone = 2;
}

message List {
  Field field_type = 1;
}

message FixedSizeList {
  Field field_type = 1;
  int32 list_size = 2;
}

message Struct {
  repeated Field sub_field_types = 1;
}

enum UnionMode {
  sparse = 0;
  dense = 1;
}

message Union {
  repeated Field union_types = 1;
  UnionMode union_mode = 2;
}

message Dictionary {
  ArrowType key = 1;
  ArrowType value = 2;
}

message Field {
  // name of the field
  string name = 1;
  ArrowType arrow_type = 2;
  bool nullable = 3;
  // for complex data types like structs, unions
  repeated Field children = 4;
}

// Useful for representing an empty Rust enum variant
message EmptyMessage {}
